import tkinter as tk
import beepy


# input_binary = input("enter binary of 8 bit\t")


def toggle():
    current_state = var.get()


def convert_to_bin(input_bin):
    lst_dec = [128, 64, 32, 16, 8, 4, 2, 1]
    split_bin = [i for i in input_bin]
    holder = []
    sum_val = 0
    for index, i in enumerate(split_bin):
        if int(i) == 1:
            holder.append(lst_dec[index])
    for i in holder:
        sum_val += i
    for i in lst_dec:
        print(i, end="\t")
    print()
    for i in split_bin:
        print(i, end=" \t")
    print()

    return sum_val


def validate_input(val_input):
    if len(val_input) < 8 or len(val_input) > 8:
        return False
    elif not val_input.isnumeric():
        return False
    for i in val_input:

        if int(i) < 0 or int(i) > 1:
            return False

    return True


def cancel():
    entry_var_8.set("")
    entry_var_7.set("")
    entry_var_6.set("")
    entry_var_5.set("")
    entry_var_4.set("")
    entry_var_3.set("")
    entry_var_2.set("")
    entry_var_1.set("")
    entry_var_res.set("")


def delete():
    if len(entry_8.get().strip()) == 1:
        entry_var_8.set("")
    elif len(entry_7.get().strip()) == 1:
        entry_var_7.set("")
    elif len(entry_6.get().strip()) == 1:
        entry_var_6.set("")
    elif len(entry_5.get().strip()) == 1:
        entry_var_5.set("")
    elif len(entry_4.get().strip()) == 1:
        entry_var_4.set("")
    elif len(entry_3.get().strip()) == 1:
        entry_var_3.set("")
    elif len(entry_2.get().strip()) == 1:
        entry_var_2.set("")
    elif len(entry_1.get().strip()) == 1:
        entry_var_1.set("")
    else:
        beep()


def delete_res():
    hold = entry_var_res.get()[:-1]
    entry_var_res.set(hold)


def click_button(b):
    if not var.get():
        if b == "C":
            cancel()
        elif b == "D":
            delete()
        elif int(b) > 1:
            beep()
        elif len(entry_1.get().strip()) == 0:
            set_input(b, entry_1, entry_var_1)
        elif len(entry_2.get().strip()) == 0:
            set_input(b, entry_2, entry_var_2)
        elif len(entry_3.get().strip()) == 0:
            set_input(b, entry_3, entry_var_3)
        elif len(entry_4.get().strip()) == 0:
            set_input(b, entry_4, entry_var_4)
        elif len(entry_5.get().strip()) == 0:
            set_input(b, entry_5, entry_var_5)
        elif len(entry_6.get().strip()) == 0:
            set_input(b, entry_6, entry_var_6)
        elif len(entry_7.get().strip()) == 0:
            set_input(b, entry_7, entry_var_7)
        elif len(entry_8.get().strip()) == 0:
            set_input(b, entry_8, entry_var_8)
        else:
            beep()
    else:
        get_val = label.get()+b
        if b == "C":
            cancel()
        elif b == "D":
            delete_res()
        elif int(get_val) > 255:
            beep()
        else:
            dec_v = label.get()
            entry_var_res.set(dec_v + b)


def beep():
    beepy.beep(sound=1)  # Use sound=1 for a standard beep sound


def set_input(b, entry, entry_var):
    entry_var.set(b)


def calc_bin(dec_var):
    return bin(int(dec_var))


def calc():
    if not var.get():
        result = convert_to_bin(
        entry_var_1.get() + entry_var_2.get() + entry_var_3.get() + entry_var_4.get() + entry_var_5.get() + entry_var_6.get() + entry_var_7.get() + entry_var_8.get())
        entry_var_res.set(result)
    else:
        bin_string = calc_bin(entry_var_res.get())[2:]
        checkee =0
        if len(bin_string) < 8:
            checkee = 8 - len(bin_string)
        final_str = '0'*checkee+bin_string
        display_bin_res(final_str)


def display_bin_res(bin_val):
    entry_var_1.set(bin_val[0])
    entry_var_2.set(bin_val[1])
    entry_var_3.set(bin_val[2])
    entry_var_4.set(bin_val[3])
    entry_var_5.set(bin_val[4])
    entry_var_6.set(bin_val[5])
    entry_var_7.set(bin_val[6])
    entry_var_8.set(bin_val[7])
# stripped_input = input_binary.strip()
# stripped_input = ''.join(stripped_input.split(" "))
# checker = validate_input(stripped_input)
# if checker:
#     p = convert_to_bin(stripped_input)
#     print(f"The value for {stripped_input} = {p}")
# else:
#     print("Please Binary Numbers (0 or 1) of exactly 8 length and try again")

# Create the main window


root = tk.Tk()
root.title("CYBER WARFARE BINARY CONVERTER")
root.minsize(width=400, height=400)
root.maxsize(width=400, height=400)
entry_var_1 = tk.StringVar()
entry_var_1.set("")
entry_var_2 = tk.StringVar()
entry_var_2.set("")
entry_var_3 = tk.StringVar()
entry_var_3.set("")
entry_var_4 = tk.StringVar()
entry_var_4.set("")
entry_var_5 = tk.StringVar()
entry_var_5.set("")
entry_var_6 = tk.StringVar()
entry_var_6.set("")
entry_var_7 = tk.StringVar()
entry_var_7.set("")
entry_var_8 = tk.StringVar()
entry_var_8.set("")
entry_var_res = tk.StringVar()
entry_var_res.set("")
# Entry widget to display input and results
entry_1 = tk.Entry(root, width=3, textvariable=entry_var_1, state="readonly", font=('Arial', 16))
entry_1.grid(row=0, column=0)

entry_2 = tk.Entry(root, width=3, textvariable=entry_var_2, state="readonly", font=('Arial', 16))
entry_2.grid(row=0, column=1)

entry_3 = tk.Entry(root, width=3, textvariable=entry_var_3, state="readonly", font=('Arial', 16))
entry_3.grid(row=0, column=2)

entry_4 = tk.Entry(root, width=3, textvariable=entry_var_4, state="readonly", font=('Arial', 16))
entry_4.grid(row=0, column=3)

entry_5 = tk.Entry(root, width=3, textvariable=entry_var_5, state="readonly", font=('Arial', 16))
entry_5.grid(row=0, column=4)

entry_6 = tk.Entry(root, width=3, textvariable=entry_var_6, state="readonly", font=('Arial', 16))
entry_6.grid(row=0, column=5)

entry_7 = tk.Entry(root, width=3, textvariable=entry_var_7, state="readonly", font=('Arial', 16))
entry_7.grid(row=0, column=6)

entry_8 = tk.Entry(root, width=3, textvariable=entry_var_8, state="readonly", font=('Arial', 16))
entry_8.grid(row=0, column=7)

# Create a label widget
label_text = ""
label = tk.Entry(root, width=20, textvariable=entry_var_res, state="readonly", font=('Arial', 16))
label.grid(row=2, column=0, columnspan=8)

buttons = [
    '0', '1', '2',
    '3', '4', '5',
    '6', '7', '8',
    '9', 'D', 'C'
]

row_val = 4
col_val = 0

for button in buttons:
    tk.Button(root, text=button, padx=10, pady=10, font=('Arial', 14), command=lambda b=button: click_button(b)).grid(
        row=row_val, column=col_val)

    col_val += 1
    if col_val > 3:
        col_val = 0
        row_val += 1

# Create a Tkinter variable to store the toggle state
var = tk.BooleanVar()

# Create a Checkbutton (toggle button)
toggle_button = tk.Checkbutton(root, text="Hexadecimal", variable=var, command=toggle).grid(row=row_val + 1, column=0,
                                                                                            columnspan=5)

tk.Button(root, text='Compute', padx=10, pady=10, font=('Arial', 14), command=lambda b=button: calc()).grid(
    row=row_val + 2, column=0, columnspan=5)

# Start the Tkinter event loop
root.mainloop()
